@model PaginatedList<RacingApp.Core.DTO_S.CircuitsDTO>

@{
    ViewData["Title"] = "Index";
}

<h1>Circuits</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Name: <input type="text" name="searchStringName" value="@ViewData["CurrentFilterName"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by country name: <input type="text" name="searchStringCountry" value="@ViewData["CurrentFilterCountry"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Country
            </th>
            <th>
                Length Circuit (km)
            </th>
            <th>
                Length Circuit (miles)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            var miles = Math.Round(item.Length_Circuit * 0.62137);
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Length_Circuit)
                </td>
                <td>
                    @miles
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentSize="@ViewData["Currentsize"]"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentSize="@ViewData["Currentsize"]"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Page size: <input type="text" name="customSize" value="@ViewData["CurrentPageSize"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to normal page size</a>
        </p>
    </div>
</form>
